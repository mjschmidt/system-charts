expose:
  # Set the way how to expose the service. Set the type as "ingress", 
  # "clusterIP", "nodePort" or "loadBalancer" and fill the information 
  # in the corresponding section
  type: ingress
  tls:
    # Enable the tls or not. Note: if the type is "ingress" and the tls 
    # is disabled, the port must be included in the command when pull/push
    # images. Refer to https://github.com/goharbor/harbor/issues/5291 
    # for the detail.
    enabled: true
    # Fill the name of secret if you want to use your own TLS certificate
    # and private key. The secret must contain keys named tls.crt and 
    # tls.key that contain the certificate and private key to use for TLS
    # The certificate and private key will be generated automatically if 
    # it is not set
    secretName: ""

  ingress:
    host: harbor.local
    # set to the type of ingress controller if it has specific requirements.
    # leave as `default` for most ingress controllers.
    # set to `gce` if using the GCE ingress controller
    controller: default
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    # The annotation name for "rewrite-target", only needed when Notary
    # service is enabled
    rewriteAnnotation: nginx.ingress.kubernetes.io/rewrite-target
  clusterIP:
    # The name of ClusterIP service
    name: harbor
    ports:
      # The service port Harbor listens on when serving with HTTPS
      https: 443
  nodePort:
    # The name of NodePort service
    name: harbor
    ports:
      https:
        # The service port Harbor listens on when serving with HTTPS
        port: 443
        # The node port Harbor listens on when serving with HTTPS
        nodePort: 30003
  loadBalancer:
    # The name of LoadBalancer service
    name: harbor
    ports:
      # The service port Harbor listens on when serving with HTTPS
      https: 443

# The external URL for Harbor service. It is used to
# 1) populate the docker/helm commands showed on portal
# 2) populate the token service URL returned to docker/notary client
# 
# Format: protocol://domain[:port]. Usually:
# 1) if "expose.type" is "ingress", the "domain" should be 
# the value of "expose.ingress.host"
# 2) if "expose.type" is "clusterIP", the "domain" should be
# the value of "expose.clusterIP.name"
# 3) if "expose.type" is "nodePort", the "domain" should be
# the IP address of k8s node 
# 
# If Harbor is deployed behind the proxy, set it as the URL of proxy
externalURL: https://harbor.local

# Use the Harbor instance as the global registry in Rancher
globalRegistryMode: true

# The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamicly. 
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you have already existing persistent volumes to use
#
# For storing images and charts, you can also use "azure", "gcs", "s3", 
# "swift" or "oss". Set it in the "imageChartStorage" section
persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete
  # operation. Leaving it empty will delete PVCs after the chart deleted
  resourcePolicy: "keep"
  persistentVolumeClaim:
    registry:
      # Use the existing PVC which must be created manually before bound, 
      # and specify the "subPath" if the PVC is shared with other components
      existingClaim: ""
      # Specify the "storageClass" used to provision the volume. Or the default
      # StorageClass will be used(the default).
      # Set it to "-" to disable dynamic provisioning
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    chartmuseum:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    # update default jobservice jobLogger to DB so pvc is not really required
    jobservice:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi
    # If external database is used, the following settings for database will 
    # be ignored
    database:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi
    # If external Redis is used, the following settings for Redis will 
    # be ignored
    redis:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi
# Define which storage backend is used for registry and chartmuseum to store
# images and charts. Refer to
# https://github.com/docker/distribution/blob/master/docs/configuration.md#storage
# for the detail.
imageChartStorage:
  # Specify whether to disable `redirect` for images and chart storage, for
  # backends which not supported it (such as using minio for `s3` storage type), please disable
  # it. To disable redirects, simply set `disableredirect` to `true` instead.
  # Refer to
  # https://github.com/docker/distribution/blob/master/docs/configuration.md#redirect
  # for the detail.
  disableredirect: false
  # Specify the type of storage: "filesystem", "azure", "gcs", "s3", "swift",
  # "oss" and fill the information needed in the corresponding section. The type
  # must be "filesystem" if you want to use persistent volumes for registry
  # and chartmuseum
  type: filesystem
  filesystem:
    rootdirectory: /storage
    #maxthreads: 100
  azure:
    accountname: accountname
    accountkey: base64encodedaccountkey
    container: containername
    #realm: core.windows.net
  gcs:
    bucket: bucketname
    # The base64 encoded json file which contains the key
    encodedkey: base64-encoded-json-key-file
    #rootdirectory: /gcs/object/name/prefix
    #chunksize: "5242880"
  s3:
    region: us-west-1
    bucket: bucketname
    #accesskey: awsaccesskey
    #secretkey: awssecretkey
    #regionendpoint: http://myobjects.local
    #encrypt: false
    #keyid: mykeyid
    #insecure: false
    #v4auth: true
    #chunksize: "5242880"
    #rootdirectory: /s3/object/name/prefix
    #storageclass: STANDARD
  swift:
    authurl: https://storage.myprovider.com/v3/auth
    username: username
    password: password
    container: containername
    #region: fr
    #tenant: tenantname
    #tenantid: tenantid
    #domain: domainname
    #domainid: domainid
    #trustid: trustid
    #insecureskipverify: false
    #chunksize: 5M
    #prefix:
    #secretkey: secretkey
    #accesskey: accesskey
    #authversion: 3
    #endpointtype: public
    #tempurlcontainerkey: false
    #tempurlmethods:
  oss:
    accesskeyid: accesskeyid
    accesskeysecret: accesskeysecret
    region: regionname
    bucket: bucketname
    #endpoint: endpoint
    #internal: false
    #encrypt: false
    #insecure: false
    #chunksize: 10M
    #rootdirectory: rootdirectory

imagePullPolicy: IfNotPresent

logLevel: debug
# The initial password of Harbor admin. Change it from portal after launching Harbor
harborAdminPassword: "Harbor12345"
# The secret key used for encryption. Must be a string of 16 chars.
secretKey: "not-a-secure-key"

# nginx proxy adapter for global registry, it is used when globalRegistryMode is true.
proxy:
  image:
    repository: rancher/nginx
    tag: 1.14.2
    pullPolicy: IfNotPresent
    resources: 
      requests:
        cpu: 50m
        memory: 64Mi
      # limits:
      #   cpu: 50m
      #   memory: 64Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

# If expose the service via "ingress", the Nginx will not be used
nginx:
  image:
    repository: rancher/goharbor-nginx-photon
    tag: v1.7.5
  replicas: 1
  resources: 
    requests:
      cpu: 50m
      memory: 64Mi
    # limits:
    #   cpu: 100m
    #   memory: 64Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}

portal:
  image:
    repository: rancher/goharbor-harbor-portal
    tag: v1.7.5
  replicas: 1
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}

adminserver:
  image:
    repository: rancher/goharbor-harbor-adminserver
    tag: v1.7.5
  replicas: 1
  resources:
    requests:
      cpu: 10m
      memory: 20Mi
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}

core:
  image:
    repository: rancher/goharbor-harbor-core
    tag: v1.7.5
  replicas: 1
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    # limits:
    #   cpu: 100m
    #   memory: 256Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
  # Secret is used when core server communicates with other components.
  # If a secret key is not specified, Helm will generate one.
  # Must be a string of 16 chars.
  secret: ""

  # Fill the name of a kubernetes secret if you want to use your own
  # TLS certificate and private key for token encryption/decryption.
  # The secret must contain keys named tls.tokenServiceRootCertBundle and
  # tls.tokenServicePrivateKey that contain the certificate and private key.
  # They will be automatically generated if not set
  secretName: ""

jobservice:
  image:
    repository: rancher/goharbor-harbor-jobservice
    tag: v1.7.5
  replicas: 1
  maxJobWorkers: 10
  # The logger for jobs: "file", "database" or "stdout"
  jobLogger: database
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    # limits:
    #   cpu: 100m
    #   memory: 256Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
  # Secret is used when job service communicates with other components.
  # If a secret key is not specified, Helm will generate one.
  # Must be a string of 16 chars.
  secret: ""

registry:
  registry:
    image:
      repository: rancher/goharbor-registry-photon
      tag: v2.6.2-v1.7.5 
    resources:
      requests:
        cpu: 20m
        memory: 64Mi
      # limits:
      #   cpu: 100m
      #   memory: 256Mi
  controller:
    image:
      repository: rancher/goharbor-harbor-registryctl
      tag: v1.7.5
    resources:
      requests:
        cpu: 20m
        memory: 64Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
  replicas: 1
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
  # Secret is used to secure the upload state from client
  # and registry storage backend.
  # See: https://github.com/docker/distribution/blob/master/docs/configuration.md#http
  # If a secret key is not specified, Helm will generate one.
  # Must be a string of 16 chars.
  secret: ""

chartmuseum:
  enabled: false
  image:
    repository: rancher/goharbor-chartmuseum-photon
    tag: v0.8.1-v1.7.5
  replicas: 1
  resources:
    requests:
      cpu: 20m
      memory: 64Mi
    # limits:
    #   cpu: 100m
    #   memory: 256Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}

clair:
  enabled: true
  image:
    repository: rancher/goharbor-clair-photon
    tag: v2.0.8-v1.7.5
  replicas: 1
  # The http(s) proxy used to update vulnerabilities database from internet
  httpProxy:
  httpsProxy:
  # The interval of clair updaters, the unit is hour, set to 0 to 
  # disable the updaters
  updatersInterval: 12
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    # limits:
    #   cpu: 200m
    #   memory: 1500Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}

notary:
  enabled: true
  server:
    image:
      repository: rancher/goharbor-notary-server-photon
      tag: v0.6.1-v1.7.5
    replicas: 1
    resources:
      requests:
        cpu: 20m
        memory: 64Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
  signer:
    image:
      repository: rancher/goharbor-notary-signer-photon
      tag: v0.6.1-v1.7.5
    replicas: 1
    resources:
      requests:
        cpu: 20m
        memory: 64Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
  # Fill the name of a kubernetes secret if you want to use your own
  # TLS certificate authority, certificate and private key for notary
  # communications.
  # The secret must contain keys named tls.ca, tls.crt and tls.key that
  # contain the CA, certificate and private key.
  # They will be generated if not set.
  secretName: ""

database:
  # if external database is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    image:
      repository: rancher/goharbor-harbor-db
      tag: v1.7.5
    # The initial superuser password for internal database
    password: "changeit"
    resources:
     requests:
       cpu: 100m
       memory: 128Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
  external:
    host: "192.168.0.1"
    port: "5432"
    username: "user"
    password: "password"
    coreDatabase: "registry"
    clairDatabase: "clair"
    notaryServerDatabase: "notary_server"
    notarySignerDatabase: "notary_signer"
    sslmode: "disable"
  ## Additional deployment annotations
  podAnnotations: {}

redis:
  # if external Redis is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    image:
      repository: rancher/goharbor-redis-photon
      tag: v1.7.5
    resources:
     requests:
       cpu: 100m
       memory: 128Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
  external:
    host: "192.168.0.2"
    port: "6379"
    # The "coreDatabaseIndex" must be "0" as the library Harbor
    # used doesn't support configuring it
    coreDatabaseIndex: "0"
    jobserviceDatabaseIndex: "1"
    registryDatabaseIndex: "2"
    chartmuseumDatabaseIndex: "3"
    password: ""
  ## Additional deployment annotations
  podAnnotations: {}

global:
  systemDefaultRegistry: ""